name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VIRTUAL_ENV: "${{ github.workspace }}/.venv"
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  POETRY_NO_INTERACTION: "1"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry and Dependencies
        run: |
          echo "Starting the pipeline. Let‚Äôs ensure clean and functional code. üêº"
          python --version
          pip install poetry
          poetry install

      - name: Run Linter
        run: |
          echo "Running the linter to ensure clean and maintainable code."
          poetry run flake8 my_project

  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Poetry and Dependencies
        run: |
          python --version
          pip install poetry
          poetry install

      - name: Run Tests
        run: |
          echo "Running tests to ensure everything is working correctly."
          poetry run pytest tests/

      - name: Post-Pipeline Message
        run: echo "Pipeline completed. üêº If something failed, let‚Äôs review it together to improve."

  validate_mr:
    name: Validate Merge Request Template
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Validate Merge Request Description
        run: |
          echo "Validating that the merge request follows the template..."
          curl -H "Authorization: Bearer ${{ secrets.GITLAB_API_TOKEN }}" \
               "https://gitlab.example.com/api/v4/projects/${{ secrets.CI_PROJECT_ID }}/merge_requests/${{ github.event.pull_request.number }}" \
               | jq -r '.description' > mr_description.txt
          if grep -q "Description" mr_description.txt && grep -q "Changes Made" mr_description.txt && grep -q "Checklist" mr_description.txt; then
            echo "The merge request follows the template. ‚úÖ"
          else
            echo "The merge request does not follow the template. ‚ùå"
            exit 1
          fi

  check_sensitive_files:
    name: Check Sensitive Files
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check Sensitive Files
        run: |
          echo "Checking if critical files have been modified..."
          git diff --name-only HEAD^ | grep -E 'config\.yaml|requirements\.txt|pyproject\.toml' && echo "Critical files modified. Please review carefully. ‚ö†Ô∏è" || echo "Everything looks good."

  auto_label:
    name: Auto Label Feature PRs
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'feature/')
    steps:
      - name: Auto Label PR
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITLAB_API_TOKEN }}" \
               -d '{"labels":["feature"]}' \
               "https://gitlab.example.com/api/v4/projects/${{ secrets.CI_PROJECT_ID }}/merge_requests/${{ github.event.pull_request.number }}"

